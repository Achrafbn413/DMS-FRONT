import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Transaction, TransactionWithMeta } from '../models/transaction.model';

@Injectable({
  providedIn: 'root'
})
export class TransactionService {
  private apiUrl = 'http://localhost:8080/api/transactions';
  private satimUrl = 'http://localhost:8080/api/satim';

  constructor(private http: HttpClient) {}

  /**
   * âœ… MÃ‰THODE PRINCIPALE : RÃ©cupÃ¨re toutes les transactions avec statut litiges
   * Correspond Ã  TransactionController.getAllTransactions()
   */
  getAllTransactions(): Observable<TransactionWithMeta[]> {
    const headers = this.getAuthHeaders();
    return this.http.get<TransactionWithMeta[]>(`${this.apiUrl}/with-litiges`, { headers })
      .pipe(
        catchError(error => {
          console.error('[ERROR] Erreur chargement transactions:', error);
          return throwError(() => error);
        })
      );
  }

  /**
   * âœ… NOUVELLE MÃ‰THODE : Transactions pour dashboard sÃ©curisÃ©
   * Correspond Ã  TransactionController.getTransactionsForDashboard()
   */
  getTransactionsForDashboard(): Observable<TransactionWithMeta[]> {
    const headers = this.getAuthHeaders();
    return this.http.get<TransactionWithMeta[]>(`${this.apiUrl}/dashboard`, { headers })
      .pipe(
        catchError(error => {
          console.error('[ERROR] Erreur chargement dashboard transactions:', error);
          return throwError(() => error);
        })
      );
  }

  /**
   * âœ… NOUVELLE MÃ‰THODE : Transactions simples sans authentification
   * Correspond Ã  TransactionController.getAllTransactionsSimple()
   */
  getAllTransactionsSimple(): Observable<TransactionWithMeta[]> {
    return this.http.get<TransactionWithMeta[]>(`${this.apiUrl}/simple`)
      .pipe(
        catchError(error => {
          console.error('[ERROR] Erreur chargement transactions simples:', error);
          return throwError(() => error);
        })
      );
  }

  /**
   * âœ… NOUVELLE MÃ‰THODE : Transaction par ID
   * Note: Endpoint backend Ã  implÃ©menter si nÃ©cessaire
   */
  getTransactionById(id: number): Observable<TransactionWithMeta> {
    const headers = this.getAuthHeaders();
    return this.http.get<TransactionWithMeta>(`${this.apiUrl}/${id}`, { headers })
      .pipe(
        catchError(error => {
          console.error('[ERROR] Erreur rÃ©cupÃ©ration transaction:', error);
          return throwError(() => error);
        })
      );
  }

  /**
   * âœ… MÃ‰THODE EXISTANTE AMÃ‰LIORÃ‰E : Upload avec authentification
   */
  uploadSatimFile(file: File): Observable<string> {
    const formData = new FormData();
    formData.append('file', file);
    
    const headers = this.getAuthHeaders();
    // Note: pour FormData, ne pas dÃ©finir Content-Type manuellement
    const headersForUpload = new HttpHeaders({
      'Authorization': headers.get('Authorization') || ''
    });

    return this.http.post(`${this.satimUrl}/upload`, formData, { 
      headers: headersForUpload, 
      responseType: 'text' 
    })
    .pipe(
      catchError(error => {
        console.error('[ERROR] Erreur upload fichier:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * âœ… NOUVELLE MÃ‰THODE : RÃ©cupÃ©ration des donnÃ©es SATIM
   */
  getAllSatimTransactions(): Observable<any[]> {
    return this.http.get<any[]>(`${this.satimUrl}/all`)
      .pipe(
        catchError(error => {
          console.error('[ERROR] Erreur rÃ©cupÃ©ration SATIM:', error);
          return throwError(() => error);
        })
      );
  }

  /**
   * âœ… MÃ‰THODE UTILITAIRE : Headers d'authentification
   */
  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('authToken') || localStorage.getItem('token');
    
    if (!token) {
      console.warn('[WARNING] Aucun token d\'authentification trouvÃ©');
      return new HttpHeaders();
    }

    return new HttpHeaders({
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    });
  }

  /**
   * âœ… NOUVELLE MÃ‰THODE : VÃ©rifier si l'utilisateur est authentifiÃ©
   */
  isAuthenticated(): boolean {
    const token = localStorage.getItem('authToken') || localStorage.getItem('token');
    return !!token;
  }

  /**
   * âœ… NOUVELLE MÃ‰THODE : Debug - afficher les headers
   */
  debugHeaders(): void {
    const headers = this.getAuthHeaders();
    console.log('[DEBUG] Headers actuels:', headers.keys());
    console.log('[DEBUG] Authorization:', headers.get('Authorization'));
  }
  // ====================================================================
// ðŸ†• NOUVELLE MÃ‰THODE POUR FONCTIONNALITÃ‰ DÃ‰TAILS TRANSACTION
// ====================================================================

/**
 * âœ… NOUVELLE MÃ‰THODE : RÃ©cupÃ©rer les dÃ©tails complets d'une transaction
 */
getTransactionDetails(transactionId: number): Observable<any> {
  const headers = this.getAuthHeaders();
  
  return this.http.get<any>(`${this.apiUrl}/details/${transactionId}`, { headers }).pipe(
    catchError(error => {
      console.error('[ERROR] Erreur rÃ©cupÃ©ration dÃ©tails transaction:', error);
      return throwError(() => new Error('Erreur lors de la rÃ©cupÃ©ration des dÃ©tails de la transaction.'));
    })
  );
}
}